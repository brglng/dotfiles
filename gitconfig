[core]
	autocrlf = false
	excludesfile = ~/.gitignore_global
	filemodes = true
	fileMode = true
	; pager = cat
	quotePath = false
	precomposeunicode = true
[http]
	postBuffer = 524288000
[push]
	default = simple
	recurseSubmodules = on-demand
[pull]
	rebase = false
[gc]
	autoDetach = false
[format]
	pretty = oneline
[color]
	ui = true
[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true
[diff]
	tool = nvim
	guitool = neovide
[difftool]
	prompt = false
	keepBackup = false
[difftool "nvim"]
	cmd = nvim -n -c "DiffviewOpen" 
[difftool "neovide"]
	cmd = neovide -- -n -c "DiffviewOpen"
[merge]
	tool = nvim
	guitool = neovide
[mergetool]
	prompt = false
	keepBackup = false
[mergetool "nvim"]
	cmd = nvim -n -c "DiffviewOpen" "$MERGE"
[mergetool "neovide"]
	cmd = neovide -- -n -c "DiffviewOpen" "$MERGE"
[mergetool "kdiff3-noauto"]
	cmd = kdiff3 --L1 \"$MERGED (Base)\" --L2 \"$MERGED (Local)\" --L3 \"$MERGED (Remote)\" -o \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
	trustExitCode = true
[alias]
	lg = log --pretty=format:'%C(yellow)%h %Cgreen%ad %Cblue%an<%ae> %Creset%s' --abbrev-commit --date=local --color --graph --decorate --all
	ci = commit
	co = checkout
	st = status
	br = branch
	df = difftool --dir-diff
	dg = difftool --gui --dir-diff
	change-commits = "!f() { VAR1=$1; VAR='$'$1; OLD=$2; NEW=$3; echo \"Are you sure for replace $VAR  $OLD => $NEW ?(Y/N)\";read OK;if [ \"$OK\" = 'Y' ] ; then shift 3; git filter-branch  --env-filter \"if [ \\\"${VAR}\\\" = '$OLD' ]; then export $VAR1='$NEW';echo 'to $NEW'; fi\" $@; fi;};  f "
[difftool "bc3"]
	trustExitCode = true
[mergetool "bc3"]
	trustExitCode = true
